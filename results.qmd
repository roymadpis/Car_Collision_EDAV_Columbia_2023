# Results
<<<<<<< HEAD



=======
```{r}
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(ggplot2)
library(ggmap)
library(lubridate)
```

## Spatial Representation
```{r}
# Sample the data
dt_sampled <- data %>% sample_n(5000)

# Display the random sample
print(dt_sampled)


```

```{r}
# Spatial data


leaflet(dt_sampled) %>%
  addTiles() %>% 
  addHeatmap(
    lat = ~Latitude,
    lng = ~Longitude,
    blur = 15,  # Adjust the blur parameter
    radius = 10)  # Adjust the radius parameter
  
#addMarkers(lng = ~Longitude, lat = ~Latitude, popup = "Marker")

```

## Time Series

```{r}
dt_temporal <- data[,c("Crash_Date/Time","Weather")]
head(dt_temporal)
```


```{r}



#Separate time and Date


dt_temporal$"Crash_Date/Time" <- as.POSIXct(dt_temporal$"Crash_Date/Time", format = "%m/%d/%Y %I:%M:%S %p", tz = "America/New_York")

dt_temporal$Crash_Date <- as.Date(dt_temporal$"Crash_Date/Time", tz = "America/New_York")

#I have a problem with the hours it doesn't show up well
dt_temporal$Crash_Time <- format(dt_temporal$"Crash_Date/Time", "%H:%M:%S")
dt_temporal
#ggplot(dt_temporal, aes(x = as.factor(Crash_week))) +
       #stat_count() +
       #labs(title='Number of car crash per weeks')

```

```{r}
start_date = min(dt_temporal$Crash_Date)
end_date = max(dt_temporal$Crash_Date)

date_sequence <- seq(start_date, end_date, by = "week")
dt_temporal$Crash_week <- cut(dt_temporal$Crash_Date, breaks = c(date_sequence, Inf), labels = as.factor(date_sequence), include.lowest = TRUE)

dt_temporal_red <- dt_temporal %>%
  filter(Crash_Date > as.Date("2013", format = '%Y')) %>%
  group_by(Crash_week) %>%
  mutate(Count_week = n()) %>%
  arrange(Crash_week)

#Create a new table to remove the iteration where there are multiple time the same combination for the columns Crash_week and Count_week.
dt_temporal_week <- dt_temporal_red %>%
  distinct(Crash_week, Count_week, .keep_all = TRUE)%>%
  mutate(Crash_week = as.Date(Crash_week, format = "%Y-%m-%d")) %>%
  mutate(Crash_month = month(Crash_week))
  
dt_temporal_week

ggplot(dt_temporal_week, aes(x = Crash_week, y = Count_week)) +
  geom_line(aes(group=1)) + #because we grouped earlier by Crash_week we need now to specify that we treat all the data as one group.
  geom_point() +
  labs(title='Number of car crash per weeks')+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Set breaks to 1 month interval
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") 
  #scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")  
```



### Weather Condition

```{r}

dt_temporal <- dt_temporal %>%
  filter(!Weather %in% c("OTHER", "UNKNOWN")) %>%
  filter(!is.na(Weather))

dt_temporal <- dt_temporal %>%
  mutate(Weather = if_else(Weather %in% c("SNOW", "SLEET","BLOWING SNOW"), "SNOW", Weather)) %>%
  mutate(Weather = if_else(Weather %in% c("SEVERE WINDS", "WINTRY MIX", "BLOWING SAND, SOIL, DIRT"), "WIND", Weather))%>%
  mutate(Condition = if_else(Weather %in% c("CLEAR","CLOUDY"),"Good","Bad"))

color_scale <- c("RAINING" = "slateblue", "SNOW" = "whitesmoke", "CLOUDY" = "gray", "FOGGY" ="gray27", "WIND"="seagreen4", "CLEAR" ="skyblue")

dt_temporal$Weather <- reorder(dt_temporal$Weather, X= as.numeric(factor(dt_temporal$Weather,levels = c('CLEAR','CLOUDY','FOGGY','WIND','SNOW','RAINING'))))

ggplot(dt_temporal, aes(x = Condition, fill = Weather)) +
  geom_bar() +
  scale_fill_manual(values = color_scale)

 


#ggplot(dt_temporal, aes(x= Weather))+
#geom_bar()
```
### Hours of the day

```{r}
date <- dt_temporal$Crash_Time[1]
substr(date, )

```


```{r}
# we only care about the hours not the minutes
dt_temporal <- dt_temporal %>%
  mutate(Crash_Time = paste0(substr(Crash_Time, start = 1, stop =2),'h')) 


ggplot(dt_temporal, aes(x=Crash_Time))+
  geom_bar()+
  labs(x = 'Hours in the day',y = 'Number of Crash')
```

### Type of Lane

>>>>>>> 79fe72548c4d5dc8cda3bb0560fedeb39c50b4a9












## Roy
################ Roy

```{r}
data
```


```{r}
### add some "date slicers" columns
dt_temporal$Week_day <- weekdays(dt_temporal$Crash_Date)
dt_temporal$Month <-  months(dt_temporal$Crash_Date)
dt_temporal$Year <-  year(dt_temporal$Crash_Date)
dt_temporal$first_day_of_month <- as.Date(format(dt_temporal$Crash_Date, "%Y-%m-01"))

### Transform some colkumns to factors
dt_temporal <- mutate(dt_temporal, Week_day = factor(Week_day,
                                             levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")))

dt_temporal$Month <- factor(dt_temporal$Month, 
                          levels = c("January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"),)

### arrange the data by date
dt_temporal <- dt_temporal |> arrange(Crash_Date)

dt_temporal_month <- dt_temporal |> group_by(Month, first_day_of_month, Week_day) |> summarise(total_accidents = n())


dt_temporal_Year_month <- dt_temporal |> group_by(Year, Month, first_day_of_month, Week_day) |> summarise(total_accidents = n())


### create a ts object
first_date_in_data <- min(dt_temporal$first_day_of_month)
last_date_in_data <- max(dt_temporal$first_day_of_month)

# # Create a sequence of dates from first_date_in_data to last_date_in_data
# all_dates <- seq(as.Date(first_date_in_data), as.Date(last_date_in_data), by = "1 day")
# 
# all_dates$Week_day <- weekdays(dt_temporal$Crash_Date)
# all_dates$Month <-  months(dt_temporal$Crash_Date)
# all_dates$Year <-  year(dt_temporal$Crash_Date)
# all_dates$first_day_of_month <- as.Date(format(dt_temporal$Crash_Date, "%Y-%m-01"))

# 
# # Convert the sequence of dates to a data frame
# all_dates_df <- data.frame(first_day_of_month = all_dates, total_accidents = 0)
# 
# # Merge the sequence of dates with your existing data
# your_data_complete <- merge(all_dates_df, dt_temporal_Year_month, by = "first_day_of_month", all.x = TRUE)
# 
# 
# ts_data_month <- ts(data = dt_temporal_Year_month$total_accidents,
#                     start = c(2015,01), end = c(year(last_date_in_data)
# ,month(last_date_in_data)), frequency = 51)
# 
# moving_average_centered <- forecast::ma(ts_data_month, order = 12) #Centered MA
# 
# length(moving_average_centered)
# 
# 
# dt_temporal_Year_month$Moving_average <- moving_average_centered
```


```{r}
ggplot(dt_temporal_month) +
  geom_boxplot(mapping=aes(x=Month, y=total_accidents))
```


```{r}
#dt_temporal_Year_month|>group_by(Year) |> summarise(Total_accidents = sum(total_accidents)

ggplot(dt_temporal_Year_month, aes(x=first_day_of_month, y=total_accidents)) + 
  geom_line() + 
  geom_point() + 
  facet_grid(Week_day~.)



# Filter data for December
december_data <- dt_temporal_Year_month %>%
  filter(month(first_day_of_month) == 12)

highest_points <- dt_temporal_Year_month %>%
  group_by(Year, Week_day) %>%
  slice_max(order_by = total_accidents)

ggplot(dt_temporal_Year_month, aes(x=first_day_of_month, y=total_accidents)) + 
  geom_line() + 
  stat_smooth(method = "loess", span=0.63, col = "blue", size = 1, se = FALSE) +  # Add a moving average line
  geom_point(data = highest_points, col = "black", size = 1.4) +  # Add points only for Jan
  facet_grid(~Week_day) +
  labs(title = "line plot of total accidents faceted by weekday",
       subtitle = "The black dots present for each year the month with \nthe highest number of accidents")


# ggplot(dt_temporal) + 
#   geom_density(stat = "density",
#                aes(x = first_day_of_month), fill = "skyblue", alpha = 0.7) +
#   facet_grid(Week_day~.)




dt_temporal_Year_month
```
In the graph we can see that the nuber of accidents per weekday have a simillar trend, however the magnitude is different - on weekends there are less accidents (reasonable).
It seems that in the middle of he week there are more accidents.
Moreover, we can look at the "black dots" that present for each year the month with the highest number of accident. We can compare those dots between the different week days but also observe the "max-trend" - if we drew another line connecting each one of the black dots, we would get a line trend similar to the loess blue line trend that is presented in the plot.




```{r}
count(data, )
```




```{r}
dt_temporal_week


ts_data <- ts(data = dt_temporal_week$Crash_week, start = c(2015,1,3), end = c(2023,11,13), frequency = 51)

#dt_temporal_week$Crash_Date[nrow(dt_temporal_week)]



ts_data<- ts(df_temporal_week$Crash_week)
plot(decompose())


```



Box plot 
x axis - day of week
the box itself will use the number of accidents









