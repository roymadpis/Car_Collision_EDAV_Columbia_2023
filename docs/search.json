[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Car Collion within Montgomery County",
    "section": "",
    "text": "1 Introduction\nExplain why you chose this topic, and the questions you are interested in studying. Provide context for readers who are not familiar with the topic.\n\n1.0.1 roy"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nIn class, we were introduced to multiple plots and we are going to utilize them to drive insightful factors associating to higher number of collisions. Some of the interesting columns we wish to explore are “Crash Date/Time” to see if we can spot some trend or seasonality in the collision data based on the days of the week, hours in the day, etc. Similarly we want to use the geographical data to spot specific trends. Moreover, we will also study the quality of the roads or the configuration of the roads (whether it is curved or not, or two ways road or single). Further the weather conditions will reveal some important trend. Some other paths to explore might be the “At Fault” column that describe whether the driver is at fault in the accident or a non-motorist.\nOverall, our goal is to identify combinations of features that could elevate the risk of collisions. This information can then provide policymakers with valuable insights to implement meaningful changes or restrictions on the roads."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis"
  },
  {
    "objectID": "data.html#r-markdown",
    "href": "data.html#r-markdown",
    "title": "2  Data",
    "section": "2.3 R Markdown",
    "text": "2.3 R Markdown\n\n\nCode\ndata &lt;- read_csv(\"data/Crash_Reporting_-_Incidents_Data.csv\")\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 95584 Columns: 44\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (37): Report Number, Agency Name, ACRS Report Type, Crash Date/Time, Hit...\ndbl  (7): Local Case Number, Mile Point, Lane Number, Number of Lanes, Dista...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n### Preprocess:\nnew_col_names &lt;- colnames(data)\n# Replace spaces with underscores\nnew_col_names &lt;- gsub(\" \", \"_\", new_col_names)\nnew_col_names &lt;- gsub(\"-\", \"_\", new_col_names)\ncolnames(data) &lt;- new_col_names\n\ndata |&gt; head()\n\n\n# A tibble: 6 × 44\n  Report_Number Local_Case_Number Agency_Name ACRS_Report_Type `Crash_Date/Time`\n  &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;            &lt;chr&gt;            \n1 MCP2686006F           230031339 Montgomery… Property Damage… 06/30/2023 10:55…\n2 MCP3230004G           230031335 Montgomery… Property Damage… 06/30/2023 08:00…\n3 MCP12600013           230031067 Montgomery… Injury Crash     06/29/2023 11:53…\n4 DD55750030            230031365 Rockville … Property Damage… 07/01/2023 01:48…\n5 MCP3010008B           230034141 Montgomery… Property Damage… 07/01/2023 12:52…\n6 MCP2667008J           230031246 Montgomery… Property Damage… 06/30/2023 12:00…\n# ℹ 39 more variables: `Hit/Run` &lt;chr&gt;, Route_Type &lt;chr&gt;, Mile_Point &lt;dbl&gt;,\n#   Mile_Point_Direction &lt;chr&gt;, Lane_Direction &lt;chr&gt;, Lane_Number &lt;dbl&gt;,\n#   Lane_Type &lt;chr&gt;, Number_of_Lanes &lt;dbl&gt;, Direction &lt;chr&gt;, Distance &lt;dbl&gt;,\n#   Distance_Unit &lt;chr&gt;, Road_Grade &lt;chr&gt;, NonTraffic &lt;chr&gt;, Road_Name &lt;chr&gt;,\n#   Cross_Street_Type &lt;chr&gt;, Cross_Street_Name &lt;chr&gt;,\n#   Off_Road_Description &lt;chr&gt;, Municipality &lt;chr&gt;, Related_Non_Motorist &lt;chr&gt;,\n#   At_Fault &lt;chr&gt;, Collision_Type &lt;chr&gt;, Weather &lt;chr&gt;, …\n\n\n\n\nCode\n# Function to replace \"N/A\" with NA in a vector\nreplace_na &lt;- function(x) {\n  x[x == \"N/A\"] &lt;- NA\n  return(x)\n}\n\n# Apply the function to each column of the data frame\ndata &lt;- as_tibble(lapply(data, replace_na))\n\n\n\n2.3.1 Analyzing NAs\n\n\nCode\nb &lt;- apply(data, 2, function(c) sum(is.na(c)))\ntibble_nas &lt;- tibble(column_name = names(b), number_of_NA = b)\ntibble_nas\n\n\n# A tibble: 44 × 2\n   column_name          number_of_NA\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Report_Number                   0\n 2 Local_Case_Number              11\n 3 Agency_Name                     0\n 4 ACRS_Report_Type                0\n 5 Crash_Date/Time                 0\n 6 Hit/Run                         2\n 7 Route_Type                  12746\n 8 Mile_Point                  12117\n 9 Mile_Point_Direction        12742\n10 Lane_Direction              12106\n# ℹ 34 more rows\n\n\nCode\nggplot(tibble_nas |&gt; filter(number_of_NA &gt;0 ))+\n  geom_col(mapping = aes(y=reorder(column_name,number_of_NA), x = number_of_NA)) +\n  labs(title = \"Number of Nas in the data columns\",\n       subtitle = \"Showing only columns with number of NAs &gt; 0\")\n\n\n\n\n\n\n\nCode\npaste0(\"Number of columns with at least 1 NA = \", tibble_nas |&gt; filter(number_of_NA &gt; 0) |&gt; nrow())\n\n\n[1] \"Number of columns with at least 1 NA = 33\"\n\n\nCode\npaste0(\"Number of columns without any NAs = \", tibble_nas |&gt; filter(number_of_NA == 0) |&gt; nrow())\n\n\n[1] \"Number of columns without any NAs = 11\"\n\n\nThere are 9 columns with “too many” NAs (more than 45% of the rows)\n\n\nCode\ncolumns_with_too_many_nas &lt;- tibble_nas|&gt; filter(number_of_NA&gt;0) |&gt; arrange(number_of_NA) |&gt; filter(number_of_NA &gt; 45000)\ncolumns_with_too_many_nas\n\n\n# A tibble: 9 × 2\n  column_name                  number_of_NA\n  &lt;chr&gt;                               &lt;int&gt;\n1 Intersection_Type                   48164\n2 Intersection_Area                   69682\n3 Second_Harmful_Event                71550\n4 Fixed_Oject_Struck                  75409\n5 Off_Road_Description                83479\n6 Municipality                        85404\n7 Lane_Type                           86261\n8 Related_Non_Motorist                90311\n9 Non_Motorist_Substance_Abuse        91406\n\n\nWe will remove those columns\n\n\nCode\ndata &lt;- select(data,-as.vector(columns_with_too_many_nas$column_name))\n\n\n\nThere are many columns with NA values that mostly overlap each other (If there is NA in one of those columns it appears also in the other ones), The following code reflect that fact –&gt; if we filter the NAs from the column: Cross-Street Type –&gt; and we can observe that the number of columns with NAs reduced significantly.\n\n\n\nCode\nfiltered_data &lt;- data[!is.na(data$Cross_Street_Type),]\n\n\nb &lt;- apply(filtered_data, 2, function(c) sum(is.na(c)))\ntibble_nas &lt;- tibble(column_name = names(b), number_of_NA = b)\ntibble_nas_filtered_data &lt;- tibble_nas\ntibble_nas\n\n\n# A tibble: 35 × 2\n   column_name          number_of_NA\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Report_Number                   0\n 2 Local_Case_Number               9\n 3 Agency_Name                     0\n 4 ACRS_Report_Type                0\n 5 Crash_Date/Time                 0\n 6 Hit/Run                         2\n 7 Route_Type                     10\n 8 Mile_Point                      1\n 9 Mile_Point_Direction           25\n10 Lane_Direction                  0\n# ℹ 25 more rows\n\n\nCode\nggplot(tibble_nas |&gt; filter(number_of_NA &gt;0 ))+\n  geom_col(mapping = aes(y=reorder(column_name,number_of_NA), x = number_of_NA)) +\n  labs(title = \"Number of Nas in the data columns\",\n       subtitle = \"Showing only columns with number of NAs &gt; 0\")\n\n\n\n\n\nFor now we won’t deal with those NAs. Later in the project we would choose the specific columns to analyze together and then we will decide on the best method to deal with the NAs in those columns.\n\nWe want to get a list of columns that has the same “NA” pattern:\n\n\n\nCode\nb &lt;- apply(data, 2, function(c) sum(is.na(c)))\ntibble_nas_data &lt;- tibble(column_name = names(b), number_of_NA = b)\n\na &lt;- tibble_nas_data |&gt; filter(number_of_NA&lt;1000)\nb &lt;- tibble_nas_filtered_data |&gt; filter(number_of_NA&lt;1000)\na\n\n\n# A tibble: 16 × 2\n   column_name         number_of_NA\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Report_Number                  0\n 2 Local_Case_Number             11\n 3 Agency_Name                    0\n 4 ACRS_Report_Type               0\n 5 Crash_Date/Time                0\n 6 Hit/Run                        2\n 7 Lane_Number                    0\n 8 Number_of_Lanes                0\n 9 NonTraffic                     0\n10 At_Fault                       0\n11 Collision_Type               495\n12 Light                        792\n13 First_Harmful_Event          629\n14 Latitude                       0\n15 Longitude                      0\n16 Location                       0\n\n\nCode\nb\n\n\n# A tibble: 28 × 2\n   column_name          number_of_NA\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Report_Number                   0\n 2 Local_Case_Number               9\n 3 Agency_Name                     0\n 4 ACRS_Report_Type                0\n 5 Crash_Date/Time                 0\n 6 Hit/Run                         2\n 7 Route_Type                     10\n 8 Mile_Point                      1\n 9 Mile_Point_Direction           25\n10 Lane_Direction                  0\n# ℹ 18 more rows\n\n\nCode\ndifference_both_ways &lt;- union(setdiff(a$column_name, b$column_name), setdiff(b$column_name, a$column_name))\nprint(difference_both_ways)\n\n\n [1] \"Route_Type\"           \"Mile_Point\"           \"Mile_Point_Direction\"\n [4] \"Lane_Direction\"       \"Direction\"            \"Distance\"            \n [7] \"Distance_Unit\"        \"Road_Grade\"           \"Road_Name\"           \n[10] \"Cross_Street_Type\"    \"Cross_Street_Name\"    \"Road_Alignment\""
  },
  {
    "objectID": "data.html#repartition-of-the-nas-in-between-columns",
    "href": "data.html#repartition-of-the-nas-in-between-columns",
    "title": "2  Data",
    "section": "2.4 Repartition of the NAs in between columns",
    "text": "2.4 Repartition of the NAs in between columns\nWe want to use the plot_missing function for redav package to see the NAs pattern regarding the columns that we suspect has NAs in the same rows:\n\n\nCode\nredav::plot_missing(data |&gt;select(difference_both_ways,))\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(difference_both_ways)\n\n  # Now:\n  data %&gt;% select(all_of(difference_both_ways))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nUsing the plot_missing function, we can clearly see that those columns indeed has NAs in the same rows.\nWe will take one of those columns: Cross_Street_Type and use it as a representative of the 12 columns group:\n\n\nCode\nb &lt;- apply(data, 2, function(c) sum(is.na(c)))\ntibble_nas &lt;- tibble(column_name = names(b), number_of_NA = b)\n\n\ncolumns_with_na &lt;- tibble_nas |&gt; filter(number_of_NA&gt;500) \n\ncolumns_with_na &lt;- columns_with_na$column_name\n\ndifferences &lt;- union(setdiff(columns_with_na, difference_both_ways), setdiff(difference_both_ways, columns_with_na))\n\ndifferences &lt;- c(differences, \"Cross_Street_Type\")\nprint(differences)\n\n\n [1] \"Weather\"                \"Surface_Condition\"      \"Light\"                 \n [4] \"Traffic_Control\"        \"Driver_Substance_Abuse\" \"First_Harmful_Event\"   \n [7] \"Junction\"               \"Road_Condition\"         \"Road_Division\"         \n[10] \"Cross_Street_Type\"     \n\n\nCode\nredav::plot_missing(data |&gt;select(differences,))\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(differences)\n\n  # Now:\n  data %&gt;% select(all_of(differences))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nIn conclusion, for all the columns in the array ‘difference_both_ways’ we can deal with the NAs in the same way in the future. However, for the other columns which still has a lot of NAs like Weather or Traffic Control, we need to be more careful when removing the NAs because we could end up with very few rows in the data set. We will take care of them on a case-by-case basis."
  }
]